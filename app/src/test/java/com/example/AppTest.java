/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package com.example;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    //iterator1 2,3
    //iterator2 0,1
    //
    @Test
    void testSortedSuccess() {
        SuperIterator superIterator = new SuperIterator(
                Arrays.asList(
                        new TestIterator(Arrays.asList(2, 3)),
                        new TestIterator(Arrays.asList(2, 3, 10, 22, 0 , -1)),
                        new TestIterator(Arrays.asList(0, 1, 7, 4))
                )
        );

        List<Integer> excepted = List.of(-1, 0, 0, 1, 2, 2, 3, 3, 4, 7, 10, 22);
        List<Integer> actual = new ArrayList<>();

        while (superIterator.hasNext()) {
            int next = superIterator.next();
            actual.add(next);
            System.out.println("print next:" + next);
        }

        Assertions.assertEquals(excepted, actual);

    }

    @Test
    void testInfinity() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            new SuperIterator(
                    Arrays.asList(
                            new ConstIterator(),
                            new TestIterator(Arrays.asList(0, 1))
                    )
            );
        });

        String expectedMessage = "Итератор не может быть бесконечным";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));

    }
}
